/**
 * $Id$ 
 * 
 * This file is part of the Process Language Runtime (PLR) 
 * and is licensed under the GPL v3.0.
 * 
 * Author: Einar Egilsson (einar@einaregilsson.com) 
 */
ï»¿using System;
using System.Collections.Generic;
using System.Reflection.Emit;
using System.Reflection;
using PLR.Compilation;

namespace PLR.AST.Expressions {

    public class Variable : Expression {
        public const string NotUsedName = "notused";

        private LocalBuilder _local;
        private static int _genCounter = 0;
        public string Name { get; set; }
        public Variable(string name) {
            this.Name = name;
            IsUsed = true;
        }

        public Variable(LocalBuilder local) {
            this.Name = "AutoGenerated" + _genCounter++;
            _local = local;
            IsUsed = true;
        }

        public override bool Equals(object obj) {
            if (!(obj is Variable)) return false;

            return this.Name == ((Variable)obj).Name;
        }
        public override int GetHashCode() {
            return this.Name.GetHashCode();
        }
        public override void Accept(AbstractVisitor visitor) {
            visitor.Visit(this);
            base.Accept(visitor);
        }
        public override Type Type {
            get {
                if (_local != null) {
                    return _local.LocalType;
                } else {
                    return typeof(object);
                }
            }
        }

        #region Compilation
        public virtual void Declare(ILGenerator il) {
            if (_local != null) {
                throw new InvalidOperationException("Variable " + Name + " is already declared!");
            }
            _local = il.DeclareLocal(this.Type);
            _local.SetLocalSymInfo(Name);
        }

        public virtual void AssignTo(ILGenerator il) {
            il.Emit(OpCodes.Stloc, _local);
        }

        public override string ToString() {
            return Name;
        }

        public override void Compile(CompileContext context) {
            if (_local != null) {
                context.ILGenerator.Emit(OpCodes.Ldloc, _local);
            } else {
                LocalBuilder local = context.Type.GetLocal(Name);
                if (local == null) {
                    local = context.ILGenerator.DeclareLocal(typeof(object));
                    if (context.Options.Debug) {
                        local.SetLocalSymInfo(Name);
                    }
                    context.Type.Locals.Add(Name, local);
                }
                context.ILGenerator.Emit(OpCodes.Ldloc, local);
            }
        }
        #endregion
    }
}
