/**
 * $Id$ 
 * 
 * This file is part of the Process Language Runtime (PLR) 
 * and is licensed under the GPL v3.0.
 * 
 * Author: Einar Egilsson (einar@einaregilsson.com) 
 */
 ï»¿using System;
using System.Collections.Generic;
using System.Reflection.Emit;
using System.Reflection;
using PLR.Compilation;

namespace PLR.AST.Expressions {
    public class Variable : Expression {
        protected string _name;
        private LocalBuilder _local;
        private static int _genCounter = 0;
        public string Name { get { return _name; } }
        public Variable(string name) {
            _name = name;
        }
        public Variable(LocalBuilder local) {
            _name = "AutoGenerated" + _genCounter++;
            _local = local;
        }

        public override void Accept(AbstractVisitor visitor)
        {
            visitor.Visit(this);
        }
        public override Type Type {
            get {
                if (_local != null) {
                    return _local.LocalType;
                } else {
                    return typeof(object);
                }
            }
        }

        #region Compilation
        public virtual void Declare(ILGenerator il) {
            if (_local != null) {
                throw new InvalidOperationException("Variable " + _name + " is already declared!");
            }
            _local = il.DeclareLocal(this.Type);
            _local.SetLocalSymInfo(_name);
        }

        public virtual void AssignTo(ILGenerator il) {
            il.Emit(OpCodes.Stloc, _local);
        }

        public override string ToString() {
            return _name;
        }

        public override void Compile(CompileContext context) {
            if (_local != null) {
                context.ILGenerator.Emit(OpCodes.Ldloc, _local);
            } else {
                FieldBuilder field = context.CurrentMasterType.GetField(_name);
                context.ILGenerator.Emit(OpCodes.Ldarg_0);
                context.ILGenerator.Emit(OpCodes.Ldfld, context.Type.VariablesField);
                context.ILGenerator.Emit(OpCodes.Ldfld, field);
            }
        }
        #endregion
    }
}
