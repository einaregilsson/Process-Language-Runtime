using PLR.AST;
using PLR.AST.Expressions;
using PLR.AST.Processes;
using PLR.AST.Actions;
using Action = PLR.AST.Actions.Action;

COMPILER CCS 
    
    private ProcessSystem system = new ProcessSystem();
    public ProcessSystem System {get { return this.system;}}
    
    private void SetPos(Node n, Token t) {
		n.SetPos(t.line, t.col, t.val.Length, t.pos);
    }
    private void CopyPos(Node from, Node to, Token end) {
		to.SetPos(from.Line, from.Column, t.pos-from.Position, from.Position);
    }
    
CHARACTERS
  ucaseletter = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
  lcaseletter = "abcdefghijklmnopqrstuvwxyz".
  letter = ucaseletter + lcaseletter.   
  digit = "0123456789".
  cr  = '\r'.    
  lf  = '\n'.
  tab = '\t'.  
  space = ' '.      
  underscore = '_'.      
     
TOKENS    
  PROCNAME   = ucaseletter {letter|digit} {'\''} .
  PROCNAMESUB= ucaseletter {letter|digit} {'\''} '_'.
  LCASEIDENT = lcaseletter {letter|digit}.
  OUTACTION  = underscore lcaseletter {letter|digit} underscore.
  NUMBER = digit {digit}.

COMMENTS FROM "#" TO lf
IGNORE cr + lf + tab

PRODUCTIONS

CCS                                                   
=   
    			                                        (. ProcessDefinition proc; .)						       
	ProcessDefinition<out proc, true>                   (. this.System.Add(proc); .)
    {
        ProcessDefinition<out proc, false>              (. this.System.Add(proc); .)
    }                                                   (. CopyPos(this.System[0],this.System, t); .)
.  

ProcessDefinition<out ProcessDefinition procdef, bool entryProc> =      (. Process proc; ProcessConstant pc; .)
    ProcessConstantDef<out pc>                          
    '='
    Process<out proc>                                   (. procdef = new ProcessDefinition(pc, proc, entryProc); CopyPos(pc,procdef,t); .)
.

ProcessConstantDef<out ProcessConstant pc>				(. pc = null; .)
=
    PROCNAME                                            (. pc = new ProcessConstant(t.val); SetPos(pc, t);.)
    
    |
    
    PROCNAMESUB                                         (. pc = new ProcessConstant(t.val.Replace("_",""));  SetPos(pc,t); ArithmeticExpression subscript; .)
    '{'                                                 (. Token startToken = t; .)
    Subscript<out subscript>                            (. pc.Subscript.Add(subscript); .)
    {
        ',' Subscript<out subscript>                    (. pc.Subscript.Add(subscript); .)
    }
    '}'                                                 (. SetPos(pc.Subscript,startToken); pc.Subscript.Length = t.pos - pc.Subscript.Position; .)
.

Subscript<out ArithmeticExpression sub>                 (. sub = null; .)
=
    LCASEIDENT                                          (. sub = new Variable(t.val); SetPos(sub, t); .)
    |
    NUMBER|'0'                                          (. sub = new Constant(int.Parse(t.val)); SetPos(sub, t); .)
.

Process<out Process proc>                               
=   
    NonDeterministicChoice<out proc>       
.

NonDeterministicChoice<out Process proc>                (. Process pc; NonDeterministicChoice ndc = new NonDeterministicChoice();.)
=
    ParallelComposition<out pc>                         (. ndc.Add(pc); .)
    {
        '+' ParallelComposition<out pc>                 (. ndc.Add(pc); .)
    }                                                   (. if (ndc.Count == 1) {proc = ndc[0]; }else {proc = ndc; CopyPos(ndc[0],proc, t);}.)
.

ParallelComposition<out Process proc>                   (. Process ap; ParallelComposition pc = new ParallelComposition();.)
=
    ActionPrefix<out ap>                                (. pc.Add(ap); .)
    {
        '|' ActionPrefix<out ap>                        (. pc.Add(ap); .)
    }                                                   (. if (pc.Count == 1) proc = pc[0]; else {proc = pc; CopyPos(pc[0],proc,t);}.)
.

ActionPrefix<out Process proc>                          (. ActionPrefix ap = null; ActionPrefix prev = null; ActionPrefix first = null; Process nextProc = null; ProcessConstant pc; proc = null; Action act = null; .)
=
    { 
        Action<out act> '.'                             (. ap = new ActionPrefix(act, null); CopyPos(ap.Action,ap,t); if (first == null) first = ap; if (prev != null) { prev.Process = ap;} prev = ap;.)
    }
    (
        '(' Process<out nextProc> ')'                   (. nextProc.ParenCount++; .)
        |
        '0'                                             (. nextProc = new NilProcess(); SetPos(nextProc, t);.)
        |
        ProcessConstantInvoke<out pc>                   (. nextProc = pc; .)
    )                                                   (. if (first == null) proc = nextProc; else {ap.Process = nextProc; proc = first;}; .)

    [Relabelling<nextProc.Relabelling>]
    [Restriction<nextProc.Restrictions>]
.

ProcessConstantInvoke<out ProcessConstant pc>           (. pc = null; .)
=
    PROCNAME                                            (. pc = new ProcessConstant(t.val); SetPos(pc, t); .)
    
    |
    
    PROCNAMESUB                                         (. pc = new ProcessConstant(t.val.Replace("_",""));  SetPos(pc, t); ArithmeticExpression subscript; .)
    '{'
    ArithmeticExpression<out subscript>                 (. pc.Subscript.Add(subscript); .)
    {
        ',' ArithmeticExpression<out subscript>         (. pc.Subscript.Add(subscript); .)
    }
    '}'
.

Action<out Action act>                                  (. act = null; .)
=
    't'                                                 (. act = new TauAction(); SetPos(act, t); .)
    |
    LCASEIDENT                                          (. act = new InAction(t.val); SetPos(act, t);.)
    |
    OUTACTION                                           (. if (t.val == "_t_") SemErr("Tau actions cannot be output actions!"); act = new OutAction(t.val); SetPos(act, t);.) 
.

Relabelling<Relabellings labels>                        (. string relabelTo, relabelFrom; .)
=
    '['                                                 (. SetPos(labels, t); .)
        LCASEIDENT                                      (. relabelTo = t.val; .)
        '/'
        LCASEIDENT                                      (. relabelFrom = t.val; labels.Add(new ActionID(relabelFrom), new ActionID(relabelTo)); .)
        {
            ','
            LCASEIDENT                                  (. relabelTo = t.val; .)
            '/'
            LCASEIDENT                                  (. relabelFrom = t.val; labels.Add(new ActionID(relabelFrom), new ActionID(relabelTo)); .)
        }
    ']'
.

Restriction<Restrictions res>          
=
    '\\'
    (
        LCASEIDENT                                      (. res.Add(new ActionID(t.val)); SetPos(res, t); res.ParenCount = 0; .)
        |
        (
            '{'                                         (. res.ParenCount = 1; .)
            LCASEIDENT                                  (. res.Add(new ActionID(t.val)); SetPos(res, t); .)
            {
                ',' 
                LCASEIDENT                              (. res.Add(new ActionID(t.val)); .)
            }
            '}'
        )
    )        
.

ArithmeticExpression<out ArithmeticExpression aexp>     (. ArithmeticBinOp op; ArithmeticExpression right = null, left = null; .)
=
    PlusMinusTerm<out left>                             (. aexp = left; .)
    {
        (
            '+'                                         (. op = ArithmeticBinOp.Plus; .)
            |
            '-'                                         (. op = ArithmeticBinOp.Minus; .)
        )
        PlusMinusTerm<out right>                        (. aexp = new ArithmeticBinOpExpression(aexp, right, op); CopyPos(((ArithmeticBinOpExpression)aexp).Left,aexp,t);.)
    }
.

PlusMinusTerm<out ArithmeticExpression aexp>            (. ArithmeticBinOp op; ArithmeticExpression right = null, left = null; .)
=
    UnaryMinusTerm<out left>                            (. aexp = left; .)
    {
        (
            '*'                                         (. op = ArithmeticBinOp.Multiply; .)
            |
            '/'                                         (. op = ArithmeticBinOp.Divide; .)
            |
            '%'                                         (. op = ArithmeticBinOp.Modulo; .)
        )
        UnaryMinusTerm<out right>                       (. aexp = new ArithmeticBinOpExpression(aexp, right, op); CopyPos(((ArithmeticBinOpExpression)aexp).Left,aexp,t); .)
    }
.

UnaryMinusTerm<out ArithmeticExpression aexp>           (. bool isMinus = false; Token minusToken = null; aexp = null; .)
=
    [
        '-'                                             (. isMinus = true; minusToken = t; .)
    ]                                   
    
    (
        '(' ArithmeticExpression<out aexp> ')'          (. aexp.ParenCount += 1; .)
        |
        NUMBER                                          (. aexp = new Constant(int.Parse(t.val)); SetPos(aexp, t); .)
        |
        '0'                                             (. aexp = new Constant(int.Parse(t.val)); SetPos(aexp, t);.)
        |
        LCASEIDENT                                      (. aexp = new Variable(t.val); SetPos(aexp, t); .)
    )
                                                        (. if (isMinus) {aexp = new UnaryMinus(aexp); SetPos(aexp, minusToken);} .)
.

END CCS.