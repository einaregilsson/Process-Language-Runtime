using PLR.AST;
using PLR.AST.Expressions;
using PLR.AST.Processes;
using PLR.AST.Actions;
using PLR.AST.ActionHandling;
using Action = PLR.AST.Actions.Action;
using System.Collections.Generic;

COMPILER CCS
    
    private ProcessSystem system = new ProcessSystem();
    public ProcessSystem System {get { return this.system;}}
    
    private void SetPos(Node n, Token t) {
        n.LexicalInfo.StartLine = t.line;
        n.LexicalInfo.StartColumn = t.col;
        n.LexicalInfo.EndLine = t.line;
        n.LexicalInfo.EndColumn = t.col+t.val.Length;
    }

    private void SetPos(Node n, Token start, Token end) {
        n.LexicalInfo.StartLine = start.line;
        n.LexicalInfo.StartColumn = start.col;
        n.LexicalInfo.EndLine = end.line;
        n.LexicalInfo.EndColumn = end.col+end.val.Length;
    }
    
    private void SetStartPos(Node n, Token t) {
        n.LexicalInfo.StartLine = t.line;
        n.LexicalInfo.StartColumn = t.col;
    }

    private void SetEndPos(Node n, Token t) {
        n.LexicalInfo.EndLine = t.line;
        n.LexicalInfo.EndColumn = t.col;
    }
    
    private void CopyPos(Node n, Node source, Token end) {
        n.LexicalInfo.StartLine = source.LexicalInfo.StartLine;
        n.LexicalInfo.StartColumn = source.LexicalInfo.StartColumn;
        n.LexicalInfo.EndLine = t.line;
        n.LexicalInfo.EndColumn = t.col;
    }

CHARACTERS
  ucaseletter = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
  lcaseletter = "abcdefghijklmnopqrstuvwxyz".
  letter = ucaseletter + lcaseletter.   
  digit = "0123456789".
  cr  = '\r'.    
  lf  = '\n'.
  tab = '\t'.  
  space = ' '.
  anyButQuote = ANY - '"'.
  underscore = '_'.      
     
TOKENS    
  PROCNAME   = ucaseletter {letter|digit} {'\''} .
  PROCNAMESUB= ucaseletter {letter|digit} {'\''} '_'.
  LCASEIDENT = lcaseletter {letter|digit}.
  CLASSNAME  = ucaseletter {letter|digit}  '.' ucaseletter {letter|digit} { '.' ucaseletter {letter|digit}}.
  OUTACTION  = underscore lcaseletter {letter|digit} underscore.
  METHOD     = ':' letter {letter|digit} .
  NUMBER = digit {digit}.
  STRING = '"' {anyButQuote} '"'.

COMMENTS FROM "#" TO lf
IGNORE cr + lf + tab

PRODUCTIONS

CCS                                                   
=   
	{ ClassImport<> }
    			                                        (. ProcessDefinition proc; .)						       
	ProcessDefinition<out proc, true>                   (. this.System.Add(proc); .)
    {
        ProcessDefinition<out proc, false>              (. this.System.Add(proc); .)
    }                                                   (. CopyPos(this.System, this.System[0], t); .)
.  

ClassImport<>
=
	"use" CLASSNAME										(. this.System.AddImport(t.val); .)
.

ProcessDefinition<out ProcessDefinition procdef, bool entryProc> = (. Process proc; string name; List<Variable> vars = new List<Variable>(); .)
    PROCNAME											(. name = t.val; Token startTok = t;.)
     [
		'('
			LCASEIDENT									(. vars.Add(new Variable(t.val)); .)
			{ 
				',' LCASEIDENT							(. vars.Add(new Variable(t.val)); .)
			}
		')'
    ]													(. Token endTok = t; .)
    '='													(. Token startProc = la; .)
    Process<out proc>                                   (. procdef = new ProcessDefinition(proc, name, entryProc); SetPos(procdef, startTok, endTok);
														   foreach (Variable v in vars) { procdef.Variables.Add(v); }
														   SetPos(proc, startProc, t);
														   .)
.

Process<out Process proc>                               
=   
    NonDeterministicChoice<out proc>       
.

NonDeterministicChoice<out Process proc>                (. Process pc; NonDeterministicChoice ndc = new NonDeterministicChoice();.)
=
    ParallelComposition<out pc>                         (. ndc.Add(pc); .)
    {
        '+' ParallelComposition<out pc>                 (. ndc.Add(pc); .)
    }                                                   (. if (ndc.Processes.Count == 1) {proc = ndc.Processes[0]; }else {proc = ndc; CopyPos(proc,ndc.Processes[0], t);}.)
.

ParallelComposition<out Process proc>                   (. Process ap; ParallelComposition pc = new ParallelComposition();.)
=
    ActionPrefix<out ap>                                (. pc.Add(ap); .)
    {
        '|' ActionPrefix<out ap>                        (. pc.Add(ap); .)
    }                                                   (. if (pc.Processes.Count == 1) proc = pc.Processes[0]; else {proc = pc; CopyPos(pc.Processes[0],proc,t);}.)
.

ActionPrefix<out Process proc>                          (. ActionPrefix ap = null; ActionPrefix prev = null; ActionPrefix first = null; Process nextProc = null; ProcessConstant pc; proc = null; Action act = null; .)
=
    {													(. Token startAction = la; .)
        Action<out act>									(. ap = new ActionPrefix(act, null); SetStartPos(ap,startAction); if (first == null) first = ap; if (prev != null) { prev.Process = ap;} prev = ap;.)
														(. SetPos(act, startAction, t); .)
		'.'
    }
    (
        '(' Process<out nextProc> ')'                   (. nextProc.ParenCount++; .)
        |
        '0'                                             (. nextProc = new NilProcess(); SetPos(nextProc, t);.)
        |
        ProcessConstantInvoke<out pc>                   (. nextProc = pc; .)
        |
        BranchProcess<out nextProc>						
    )                                                   (. if (first == null) proc = nextProc; else {ap.Process = nextProc; proc = first;}; .)

    [													(. PreProcessActions ppa = null; .)
    Relabelling<out ppa>								(. nextProc.PreProcessActions = ppa; .)
    ]
    [													(. ActionRestrictions ar = null; .)
    Restriction<out ar>									(. nextProc.ActionRestrictions = ar; .)
    ]
.

BranchProcess<out Process proc>							(. Expression exp = null; Process ifProc = null; Process elseProc = null; .)
=
	"if"
	Expression<out exp>
	"then"
	Process<out ifProc>
	"else"
	Process<out elseProc>								(. proc = new BranchProcess(exp, ifProc, elseProc); .)
.

ProcessConstantInvoke<out ProcessConstant pc>           (. pc = null; Expression exp = null;.)
=
    PROCNAME                                            (. pc = new ProcessConstant(t.val); SetPos(pc, t); .)
    [
		'('
			ArithmeticExpression<out exp>				(. pc.Expressions.Add(exp); .)
			{ 
				',' ArithmeticExpression<out exp>		(. pc.Expressions.Add(exp); .)
			}
		')'
    ]
.

Action<out Action act>                                  (. act = null; .)
=
    LCASEIDENT                                          (. InAction inAct = new InAction(t.val); .)
    [
		'('
			LCASEIDENT									(. inAct.AddVariable(new Variable(t.val)); .)
			{ 
				',' LCASEIDENT							(. inAct.AddVariable(new Variable(t.val)); .)
			}
		')'
    ]													(. act = inAct; .)
    |
    OUTACTION                                           (. OutAction outAct = new OutAction(t.val);  Expression exp; .) 
    [
		'('
			ArithmeticExpression<out exp>				(. outAct.AddExpression(exp); .)
			{ 
				',' ArithmeticExpression<out exp>		(. outAct.AddExpression(exp); .)
			}
		')'
    ]													(. act = outAct;  .)
    |
    METHOD												(. List<object> list = new List<object>(); Expression exp = null; string methodName = t.val.Replace(":","");  .) 
    '('
    [
		CallParam<out exp>								(. list.Add(exp); .)
		
		{
			','
			CallParam<out exp>							(. list.Add(exp); .)
		}	
    
    ]
    ')'													(. act = new Call(new MethodCallExpression(methodName, list.ToArray())); .)
.

CallParam<out Expression exp>							(. Expression aexp = null; exp = null;.)
=
	ArithmeticExpression<out aexp>						(. exp = aexp; .)
	|
	STRING												(. exp = new PLRString(t.val.Substring(1, t.val.Length-2)); SetPos(exp, t);.)
.

Relabelling<out PreProcessActions preproc>               (. preproc = null; string relabelTo, relabelFrom; RelabelActions labels = new RelabelActions(); .)
=
    '['                                                 (. Token first = t; .)
    (
		METHOD											(. preproc = new CustomPreprocess(t.val.Replace(":","")); SetPos(preproc, first);.)
		|
        LCASEIDENT                                      (. relabelTo = t.val; SetPos(labels, first);.)
        '/'
        LCASEIDENT                                      (. relabelFrom = t.val; labels.Add(relabelFrom, relabelTo); .)
        {
            ','
            LCASEIDENT                                  (. relabelTo = t.val; .)
            '/'
            LCASEIDENT                                  (. relabelFrom = t.val; labels.Add(relabelFrom, relabelTo); .)
        }												(. preproc = labels; .)
     )
    ']'
.

Restriction<out ActionRestrictions ar>          
=														(. ar = null; ChannelRestrictions res = new ChannelRestrictions(); .)
    '\\'
    (
        LCASEIDENT                                      (. res.Add(t.val); SetPos(res, t); res.ParenCount = 0; ar = res; .)
        |
        (
            '{'                                         (. res.ParenCount = 1; .)
            LCASEIDENT                                  (. res.Add(t.val); SetPos(res, t); .)
            {
                ',' 
                LCASEIDENT                              (. res.Add(t.val); .)
            }
            '}'											(. ar = res; .)
        )
        |
        METHOD											(. ar = new CustomRestrictions(t.val.Replace(":", "")); SetPos(ar, t); .)
    )        
.

Expression<out Expression exp>							(. Expression right = null, left = null; .)
=
    OrTerm<out left>									(. exp = left; .)
    {
		"or"
        OrTerm<out right>								(. exp = new LogicalBinOpExpression(exp, right, LogicalBinOp.Or); CopyPos(exp, ((LogicalBinOpExpression)exp).Left,t);.)
    }
.

OrTerm<out Expression exp>								(. Expression right = null, left = null; .)
=
    AndTerm<out left>									(. exp = left; .)
    {
		"and"
        AndTerm<out right>								(. exp = new LogicalBinOpExpression(exp, right, LogicalBinOp.And); CopyPos(exp, ((LogicalBinOpExpression)exp).Left,t);.)
    }
.

AndTerm<out Expression exp>								(. Expression right = null, left = null; .)
=
    RelationalTerm<out left>									(. exp = left; .)
    {
		"xor"
        RelationalTerm<out right>								(. exp = new LogicalBinOpExpression(exp, right, LogicalBinOp.Xor); CopyPos(exp, ((LogicalBinOpExpression)exp).Left,t);.)
    }
.

RelationalTerm<out Expression exp>						(. Expression right = null, left = null; RelationalBinOp op = RelationalBinOp.Equal;.)
=
    ArithmeticExpression<out left>									(. exp = left; .)
    [
		(
		"=="											(. op = RelationalBinOp.Equal; .)
		|
		"!="											(. op = RelationalBinOp.NotEqual; .)
		|
		">"												(. op = RelationalBinOp.GreaterThan; .)
		|
		">="											(. op = RelationalBinOp.GreaterThanOrEqual; .)
		|
		"<"												(. op = RelationalBinOp.LessThan; .)
		|
		"<="											(. op = RelationalBinOp.LessThanOrEqual; .)
		)
        ArithmeticExpression<out right>					(. exp = new RelationalBinOpExpression(exp, right, op); CopyPos(exp, ((RelationalBinOpExpression)exp).Left,t);.)
    ]
.

ArithmeticExpression<out Expression aexp>				(. ArithmeticBinOp op; Expression right = null, left = null; .)
=
    PlusMinusTerm<out left>                             (. aexp = left; .)
    {
        (
            '+'                                         (. op = ArithmeticBinOp.Plus; .)
            |
            '-'                                         (. op = ArithmeticBinOp.Minus; .)
        )
        PlusMinusTerm<out right>                        (. aexp = new ArithmeticBinOpExpression(aexp, right, op); CopyPos(((ArithmeticBinOpExpression)aexp).Left,aexp,t);.)
    }
.

PlusMinusTerm<out Expression aexp>					(. ArithmeticBinOp op; Expression right = null, left = null; .)
=
    UnaryMinusTerm<out left>                            (. aexp = left; .)
    {
        (
            '*'                                         (. op = ArithmeticBinOp.Multiply; .)
            |
            '/'                                         (. op = ArithmeticBinOp.Divide; .)
            |
            '%'                                         (. op = ArithmeticBinOp.Modulo; .)
        )
        UnaryMinusTerm<out right>                       (. aexp = new ArithmeticBinOpExpression(aexp, right, op); CopyPos(((ArithmeticBinOpExpression)aexp).Left,aexp,t); .)
    }
.

UnaryMinusTerm<out Expression aexp>						(. bool isMinus = false; Token minusToken = null; aexp = null; .)
=
    [
        '-'                                             (. isMinus = true; minusToken = t; .)
    ]                                   
    
    (
        '(' ArithmeticExpression<out aexp> ')'          (. aexp.ParenCount += 1; .)
        |
        NUMBER                                          (. aexp = new Number(int.Parse(t.val)); SetPos(aexp, t); .)
        |
        '0'                                             (. aexp = new Number(int.Parse(t.val)); SetPos(aexp, t);.)
        |
        "true"											(. aexp = new Bool(true); .)
        |
        "false"											(. aexp = new Bool(false); .)
        |
        LCASEIDENT                                      (. aexp = new Variable(t.val); SetPos(aexp, t); .)
    )
                                                        (. if (isMinus) {aexp = new UnaryMinus(aexp); SetPos(aexp, minusToken);} .)
.

END CCS.